<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width,initial-scale=1" />
    <title>JSON key lister</title>

    <script src="https://code.jquery.com/jquery-3.7.1.slim.min.js" integrity="sha256-kmHvs0B+OpCW5GVHUNjv9rOmY0IvSIRcf7zGUDTDQM8="
            crossorigin="anonymous"></script>

    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" />
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.min.js"></script>

    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css">

    <link rel="stylesheet" href="https://cdn.datatables.net/2.2.1/css/dataTables.dataTables.min.css" />
    <script src="https://cdn.datatables.net/2.2.1/js/dataTables.min.js"></script>

    <style>
        .resize-horizontal {
            resize: horizontal;
        }
    </style>
    <script>
        if (Array.prototype.unique === undefined) {
            Array.prototype.unique = function() {
                return Array.from(new Set(this));
            }
        }

        class Record {
            constructor(parameters) {
                Object.assign(this, parameters);
                this.name ??= '';
                this.ancestors ??= [];
                this.children ??= [];
            }

            get type() {
                return typeof this.value === 'object' && this.value !== null && this.value.constructor.name === 'Array'
                    ? 'array'
                    : typeof this.value;
            }

            get path() {
                return [...this.ancestors, this]
                    .map(({ name, ancestors }) => [JSON.stringify(name).slice(1, -1), ancestors])
                    .reduce((path, [name, ancestors]) => ancestors.at(-1)?.type === 'array' ? `${path}[${name}]` : `${path}/${name}`, '')
                    .replace(/^\/\//, '/')
            }

            get schemaId() {
                return [...this.ancestors, this]
                    .map(({ name, ancestors }) => [JSON.stringify(name).slice(1, -1), ancestors])
                    .reduce((path, [name, ancestors]) => ancestors.at(-1)?.type === 'array' ? `${path}[]` : `${path}/${name}`, '')
                    .replace(/^\/\//, '/')
            }
        }

        class Records extends Array {
        }

        class Model {
            parseJson(json) {
                return new Promise((resolve, reject) => {
                    let stack;
                    try {
                        stack = [new Record({ value: JSON.parse(json) })];
                    } catch (e) {
                        resolve(undefined);
                        return;
                    }

                    this.records = new Records;
                    do {
                        const record = stack.shift();

                        if (['object', 'array'].includes(record.type) && record.value !== null) {
                            record.children.push(...Object.keys(record.value).map(name => new Record({
                                value: record.value[name],
                                name: name,
                                ancestors: record.ancestors.concat(record),
                            })));
                            stack.unshift(...record.children);
                        }

                        this.records.push(record);
                    } while (stack.length > 0);

                    resolve(this.records);
                });
            }
        }

        class TextView {
            constructor() {
                this.changed = false;

                const myself = this;
                this.$element.keyup(function () {
                    const previousValue = $(this).data('previousValue') ?? '';
                    myself.changed = (previousValue !== this.value);
                    $(this).data({ previousValue: this.value });
                });
            }

            get $element() {
                return $('[data-id="text"]');
            }
            get value() {
                return this.$element[0].value;
            }
        }

        class View {
            constructor() {
                this.text = new TextView;
            }
        }

        $(function () {
            const model = new Model();
            const view = new View(model);
            view.text.$element
                .keyup(async function () {
                    console.log('start');
                    if (!view.text.changed) return;
                    console.log('parsing...')
                    const records = await model.parseJson(view.text.value);
                    console.log(records);
                    if (records === undefined) return;
                    console.log('end');

                    $('[data-id="records"]').DataTable()
                        .clear()
                        .rows.add(records
                            .map(record => [
                                record.path,
                                record.type,
                                JSON.stringify(record.value).replace(/^"|"$/g, '')
                            ]))
                        .draw();
                    $('[data-id="schema"]').DataTable()
                        .clear()
                        .rows.add(Object
                            .values(Object.groupBy(records, record => record.schemaId))
                            .map(groupedRecords => [
                                groupedRecords[0].schemaId,
                                groupedRecords[0].type,
                                groupedRecords
                                    .map(({ type, value }) => type === 'string' ? value : JSON.stringify(value))
                                    .filter(value => value !== '')
                                    .unique()
                                    .sort()
                                    .join(', '),
                            ]))
                        .draw();
                });

            $('[data-id="records"]').DataTable({
                columnDefs: [
                    {
                        targets: 0, width: '40%', render: function (data) {
                            // there are no space characters in the json keys, so the browser will not wrap them.
                            // the following code forces word wrapping for json keys.
                            return `<p style="word-wrap: break-word;">${data}</p>`
                        }
                    },
                    { targets: 1, width: '5em' },
                    { targets: 2, className: 'text-truncate' },
                ],
            });

            $('[data-id="schema"]').DataTable({
                columnDefs: [
                    {
                        targets: 0, width: '40%', render: function (data) {
                            // there are no space characters in the json keys, so the browser will not wrap them.
                            // the following code forces word wrapping for json keys.
                            return `<p style="word-wrap: break-word;">${data}</p>`
                        }
                    },
                    { targets: 1, width: '5em' },
                    { targets: 2, className: 'text-truncate' },
                ],
            });
        });
    </script>
</head>

<body>
    <div class="container d-flex flex-column min-vh-100 gap-1">
        <ul class="nav nav-tabs sticky-top bg-white mt-1">
            <li class="nav-item">
                <a class="nav-link active" aria-current="page" href="#">Text</a>
            </li>
            <li class="nav-item">
                <a class="nav-link" href="#">Records</a>
            </li>
            <li class="nav-item">
                <a class="nav-link" href="#">Schema</a>
            </li>
        </ul>
        <div class="alert alert-danger alert-dismissible fade show d-flex align-items-center m-0 px-2 py-1 gap-1" role="alert">
            <div class="bi bi-exclamation-triangle-fill fs-5"></div>
            <div class="flex-fill">The input text could not be parsed as JSON.</div>
            <button type="button" class="btn-close position-static p-0" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
        <div class="d-flex flex-column flex-fill">
            <div class="d-flex flex-column flex-fill gap-1">
                <textarea class="flex-fill" data-id="text"></textarea>
                <div class="d-flex justify-content-end">
                    <button class="btn btn-primary">Analyze</button>
                </div>
            </div>
            <div class="flex-fill">
                <table class="display compact" style="table-layout: fixed;" data-id="records">
                    <colgroup>
                        <col style="width: 30%;" />
                        <col style="width: 10em;" />
                        <col />
                    </colgroup>
                    <thead>
                        <tr>
                            <th>Path</th>
                            <th>Type</th>
                            <th>Value</th>
                        </tr>
                    </thead>
                </table>
            </div>
            <div class="flex-fill">
                <table class="display compact" style="table-layout: fixed;" data-id="schema">
                    <colgroup>
                        <col style="width: 30%;" />
                        <col style="width: 10em;" />
                        <col />
                    </colgroup>
                    <thead>
                        <tr>
                            <th>ID</th>
                            <th>Type</th>
                            <th>Samples</th>
                        </tr>
                    </thead>
                </table>
            </div>
        </div>
    </div>
</body>

</html>