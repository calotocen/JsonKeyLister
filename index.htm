<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width,initial-scale=1" />
    <title>Json schema inference</title>

    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" />
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css">
    <link rel="stylesheet" href="https://cdn.datatables.net/2.2.1/css/dataTables.dataTables.min.css" />
    <link rel="stylesheet" href="https://cdn.datatables.net/buttons/3.2.0/css/buttons.dataTables.min.css" />

    <style>
        .resize-horizontal {
            resize: horizontal;
        }

        .cursor-pointer {
            cursor: pointer;
        }

        .aspect-ratio-1x1 {
            aspect-ratio: 1;
        }

        .fs-0 {
            font-size: 3rem !important;
        }

        :root {
            --bs-primary: #089e0a;
            --bs-primary-bg-subtle: #056b07;
        }

        .btn-hover-primary {
            --bs-btn-color: var(--bs-gray-300);
            --bs-btn-bg: transparent;
            --bs-btn-border-color: var(--bs-gray-300);
            --bs-btn-hover-color: var(--bs-white);
            --bs-btn-hover-bg: var(--bs-primary);
            --bs-btn-hover-border-color: var(--bs-primary);
            --bs-btn-focus-shadow-rgb: 49, 132, 253;
            --bs-btn-active-color: var(--bs-white);
            --bs-btn-active-bg: var(--bs-primary-bg-subtle);
            --bs-btn-active-border-color: var(--bs-primary-bg-subtle);
            --bs-btn-active-shadow: inset 0 3px 5px rgba(0, 0, 0, 0.125);
            --bs-btn-disabled-color: var(--bs-white);
            --bs-btn-disabled-bg: var(--bs-gray-300);
            --bs-btn-disabled-border-color: var(--bs-gray-300);
        }
    </style>
</head>

<body>
    <div class="d-flex flex-column min-vh-100">
        <div class="text-light bg-dark font-monospace px-3 py-1">
            <span class="fs-2">Json schema inference</span>
            <span class="ps-1" style="font-size: 0.8rem;">（使用方法については、<a href="#">こちら</a>をご覧ください）</span>
        </div>
        <div class="container-lg d-flex flex-fill gap-1 py-1">
            <div class="d-flex flex-fill gap-1">
                <div class="d-flex" style="width: 50%;" data-id="Text.root">
                    <div class="flex-fill" data-id="Text.container.expanded">
                        <div class="position-relative d-flex h-100">
                            <div class="d-flex flex-column flex-fill gap-1">
                                <div class="d-flex justify-content-between align-items-center">
                                    <div class="d-flex align-items-center lh-1">
                                        <div><i class="bi bi-toggle-off fs-2 text-secondary pe-1" style="display: none;" data-id="Text.autoAnalysis.off"></i></div>
                                        <div><i class="bi bi-toggle-on fs-2 text-primary pe-1" data-id="Text.autoAnalysis.on"></i></div>
                                        Auto analysis
                                    </div>
                                    <button type="button" class="btn bi bi-caret-left btn-hover-primary aspect-ratio-1x1 p-0" style="width: 2rem; line-height: 0px;" data-id="Text.collapse"></button>
                                </div>
                                <textarea class="form-control flex-fill" placeholder="Enter JSON" autofocus data-id="Text.text"></textarea>
                                <div class="d-flex">
                                    <div class="flex-fill text-danger fw-bold" style="font-size: 0.8rem;" data-id="Text.message"></div>
                                    <button class="btn btn-primary" data-id="Text.analyze">Analyze</button>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="pe-1 border-end" style="display: none;" data-id="Text.container.collapsed">
                        <button type="button" class="btn bi bi-caret-right btn-hover-primary aspect-ratio-1x1 p-0" style="width: 2rem; line-height: 0px;" data-id="Text.expand"></button>
                    </div>
                </div>
                <div class="d-flex flex-column flex-fill gap-1">
                    <ul class="nav nav-tabs sticky-top bg-white">
                        <li class="nav-item">
                            <a class="nav-link active cursor-pointer">Schema</a>
                        </li>
                    <template data-id="DataTable">
                        <div class="d-flex flex-column" data-id="${namespace}.root">
                            <div class="position-relative">
                                <div class="input-group">
                                    <span class="input-group-text bi bi-search"></span>
                                    <input type="search" class="form-control flex-fill" placeholder="Filter..." data-id="${namespace}.table.search" data-for="${namespace}.table">
                                </div>
                                <div class="d-flex position-absolute" style="height: calc(100% - 14px); top: 7px; right: 3px; gap: 1px;">
                                    <button type="button" class="h-100 aspect-ratio-1x1 border-0 p-0 btn btn-outline-primary font-monospace" data-id="${namespace}.table.search.caseSensitive" data-bs-toggle="button">aA</button>
                                    <button type="button" class="h-100 aspect-ratio-1x1 border-0 p-0 btn btn-outline-primary font-monospace bi bi-regex" data-id="${namespace}.table.search.regularExpression" data-bs-toggle="button"></button>
                                </div>
                            </div>
                            <table class="display compact" data-id="${namespace}.table"></table>
                        </div>
                    </template>
                    <div class="d-flex flex-column" data-id="Schema.root" data-template="DataTable" data-template-parameters="{&quot;namespace&quot;: &quot;Schema&quot;}">
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="container pt-1 border-top">
        <h1 class="fs-4">概要</h1>
        <p>
            入力されたJSONからキーを抽出し、そのキーに指定されている値の型とサンプルを表形式で表示します。
            キーを抽出する際は、同配列に含まれるデータは、同一のデータ構造を持つと仮定します。
            これにより、JSONのデータ構造の把握が容易になります。
        </p>
        <p>
            本ページに入力されたデータ、およびその加工物が、外部のサーバへ送信されることはありません。
            本ページを離れますと、入力されたデータは全て消去されますので、ご注意ください。
        </p>
    </div>

    <script src="https://code.jquery.com/jquery-3.7.1.slim.min.js" integrity="sha256-kmHvs0B+OpCW5GVHUNjv9rOmY0IvSIRcf7zGUDTDQM8=" crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.min.js"></script>
    <script src="https://cdn.datatables.net/2.2.1/js/dataTables.min.js"></script>
    <script src="https://cdn.datatables.net/buttons/3.2.0/js/dataTables.buttons.min.js"></script>
    <script src="https://cdn.datatables.net/buttons/3.2.0/js/buttons.colVis.min.js"></script>
    <script src="https://cdn.datatables.net/buttons/3.2.0/js/buttons.print.min.js"></script>
    <script src="https://cdn.datatables.net/buttons/3.2.0/js/buttons.html5.min.js"></script>
    <script>
        if (Array.prototype.unique === undefined) {
            Array.prototype.unique = function () {
                return Array.from(new Set(this));
            }
        }

        class Record {
            constructor(parameters) {
                Object.assign(this, parameters);
                this.name ??= '';
                this.ancestors ??= [];
                this.children ??= [];
            }

            get type() {
                return typeof this.value === 'object' && this.value !== null && this.value.constructor.name === 'Array'
                    ? 'array'
                    : typeof this.value;
            }

            get path() {
                return [...this.ancestors, this]
                    .map(({ name, ancestors }) => [JSON.stringify(name).slice(1, -1), ancestors])
                    .reduce((path, [name, ancestors]) => ancestors.at(-1)?.type === 'array' ? `${path}[${name}]` : `${path}/${name}`, '')
                    .replace(/^\/\//, '/')
            }

            get schemaId() {
                return [...this.ancestors, this]
                    .map(({ name, ancestors }) => [JSON.stringify(name).slice(1, -1), ancestors])
                    .reduce((path, [name, ancestors]) => ancestors.at(-1)?.type === 'array' ? `${path}[]` : `${path}/${name}`, '')
                    .replace(/^\/\//, '/')
            }
        }
        class Model {
            parseJson(json) {
                return new Promise((resolve, reject) => {
                    let stack;
                    try {
                        stack = [new Record({ value: JSON.parse(json) })];
                    } catch (e) {
                        resolve(undefined);
                        return;
                    }

                    this.records = [];
                    do {
                        const record = stack.shift();

                        if (['object', 'array'].includes(record.type) && record.value !== null) {
                            record.children.push(...Object.keys(record.value).map(name => new Record({
                                value: record.value[name],
                                name: name,
                                ancestors: record.ancestors.concat(record),
                            })));
                            stack.unshift(...record.children);
                        }

                        this.records.push(record);
                    } while (stack.length > 0);

                    resolve(this.records);
                });
            }
        }

        class AbstractTableView {
            constructor($element, parameters = {}) {
                this.$element = $element;
                this.$table = $element
                    .on('init.dt', function () {
                        const $root = $(this).closest('div[id^=DataTables_Table_');

                        // re-layout for top2
                        $root
                            .children(':first')
                            .find('div[class="dt-search"]')
                            .addClass('w-100')
                            .append(
                                $('<div>')
                                    .addClass('position-relative')
                                    .append(
                                        $('<div>')
                                            .addClass('input-group')
                                            .append(
                                                $('<span>')
                                                    .addClass('input-group-text bi bi-search'),
                                                $root.find('[type="search"]')
                                                    .addClass('flex-fill')),
                                        $('<button>')
                                            .attr({
                                                type: 'button',
                                                'data-bs-toggle': 'button',
                                                style: 'height: calc(100% - 6px); top: 50%; right: 3px; transform: translateY(-50%)',
                                            })
                                            .addClass('position-absolute aspect-ratio-1x1 border-0 p-0 btn btn-outline-primary font-monospace bi bi-regex')));

                        // top1
                        $root

                    })
                    .DataTable({
                        columnDefs: [
                            {
                                targets: 0, width: '40%', render: function (data) {
                                    // there are no space characters in the json keys, so the browser will not wrap them.
                                    // the following code forces word wrapping for json keys.
                                    return `<p class="m-0" style="word-wrap: break-word;">${data}</p>`
                                }
                            },
                            { targets: 1, width: '5em' },
                            { targets: 2, className: 'text-truncate' },
                        ],
                        layout: {
                            top2: { search: { text: '', placeholder: 'Filter...' } },
                            topStart: null,
                            topEnd: null,
                            bottomStart: null,
                            bottomEnd: null,
                        }
                    });
            }
        }
        class SchemaView extends AbstractTableView { }
        class RecordsView extends AbstractTableView { }
        class View {
            constructor(model) {
                this.textPane = class {
                    expandTextPane() {
                        const pane = $('[data-id="textPane"]');
                        pane.css({ width: '50%' });

                    }
                    collapseTextPane() {
                        const pane = $('[data-id="textPane"]');
                        pane.css({ width: 'auto' });
                    }
                    get textPaneExpanded() {
                    }
                }
                this.records = new RecordsView($('[data-id="record"]'));
                this.schema = new SchemaView($('[data-id="schema"]'));
            }

            get $text() {
                return $('[data-id="text"]');
            }
            get text() {
                return $('[data-id="text"]')[0].value;
            }



        }

        class Controller {
            constructor(model, view) {
                view.$text
                    .on('input', async function () {
                        const records = await model.parseJson(view.text);
                        if (records === undefined) return;

                        $('[data-id="records"]').DataTable()
                            .clear()
                            .rows.add(records
                                .map(record => [
                                    record.path,
                                    record.type,
                                    JSON.stringify(record.value).replace(/^"|"$/g, '')
                                ]))
                            .draw();
                        $('[data-id="schema"]').DataTable()
                            .clear()
                            .rows.add(Object
                                .values(Object.groupBy(records, record => record.schemaId))
                                .map(groupedRecords => [
                                    groupedRecords[0].schemaId,
                                    groupedRecords[0].type,
                                    groupedRecords
                                        .map(({ type, value }) => type === 'string' ? value : JSON.stringify(value))
                                        .filter(value => value !== '')
                                        .unique()
                                        .sort()
                                        .join(', '),
                                ]))
                            .draw();
                    });
            }
        }

        $(function () {
            const model = new Model();
            const view = new View(model);
            const controller = new Controller(model, view);
        });
    </script>
</body>

</html>