<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width,initial-scale=1" />
    <title>JSON key lister</title>

    <script src="https://code.jquery.com/jquery-3.7.1.slim.min.js" integrity="sha256-kmHvs0B+OpCW5GVHUNjv9rOmY0IvSIRcf7zGUDTDQM8="
            crossorigin="anonymous"></script>

    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" />
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.min.js"></script>

    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css">

    <link rel="stylesheet" href="https://cdn.datatables.net/2.2.1/css/dataTables.dataTables.min.css" />
    <script src="https://cdn.datatables.net/2.2.1/js/dataTables.min.js"></script>

    <link rel="stylesheet" href="https://cdn.datatables.net/buttons/3.2.0/css/buttons.dataTables.min.css" />
    <script src="https://cdn.datatables.net/buttons/3.2.0/js/dataTables.buttons.min.js"></script>
    <script src="https://cdn.datatables.net/buttons/3.2.0/js/buttons.colVis.min.js"></script>
    <script src="https://cdn.datatables.net/buttons/3.2.0/js/buttons.print.min.js"></script>
    <script src="https://cdn.datatables.net/buttons/3.2.0/js/buttons.html5.min.js"></script>

    <style>
        .resize-horizontal {
            resize: horizontal;
        }

        .cursor-pointer {
            cursor: pointer;
        }

        .aspect-ratio-1x1 {
            aspect-ratio: 1;
        }

        .fs-0 {
            font-size: 3rem !important;
        }

        :root {
            --bs-primary: #089e0a;
            --bs-primary-bg-subtle: #056b07;
        }

        .btn-hover-primary {
            --bs-btn-color: var(--bs-gray-300);
            --bs-btn-bg: transparent;
            --bs-btn-border-color: var(--bs-gray-300);
            --bs-btn-hover-color: var(--bs-white);
            --bs-btn-hover-bg: var(--bs-primary);
            --bs-btn-hover-border-color: var(--bs-primary);
            --bs-btn-focus-shadow-rgb: 49, 132, 253;
            --bs-btn-active-color: var(--bs-white);
            --bs-btn-active-bg: var(--bs-primary-bg-subtle);
            --bs-btn-active-border-color: var(--bs-primary-bg-subtle);
            --bs-btn-active-shadow: inset 0 3px 5px rgba(0, 0, 0, 0.125);
            --bs-btn-disabled-color: var(--bs-white);
            --bs-btn-disabled-bg: var(--bs-gray-300);
            --bs-btn-disabled-border-color: var(--bs-gray-300);
        }
    </style>
    <script>
        if (Array.prototype.unique === undefined) {
            Array.prototype.unique = function () {
                return Array.from(new Set(this));
            }
        }

        class Record {
            constructor(parameters) {
                Object.assign(this, parameters);
                this.name ??= '';
                this.ancestors ??= [];
                this.children ??= [];
            }

            get type() {
                return typeof this.value === 'object' && this.value !== null && this.value.constructor.name === 'Array'
                    ? 'array'
                    : typeof this.value;
            }

            get path() {
                return [...this.ancestors, this]
                    .map(({ name, ancestors }) => [JSON.stringify(name).slice(1, -1), ancestors])
                    .reduce((path, [name, ancestors]) => ancestors.at(-1)?.type === 'array' ? `${path}[${name}]` : `${path}/${name}`, '')
                    .replace(/^\/\//, '/')
            }

            get schemaId() {
                return [...this.ancestors, this]
                    .map(({ name, ancestors }) => [JSON.stringify(name).slice(1, -1), ancestors])
                    .reduce((path, [name, ancestors]) => ancestors.at(-1)?.type === 'array' ? `${path}[]` : `${path}/${name}`, '')
                    .replace(/^\/\//, '/')
            }
        }
        class Model {
            parseJson(json) {
                return new Promise((resolve, reject) => {
                    let stack;
                    try {
                        stack = [new Record({ value: JSON.parse(json) })];
                    } catch (e) {
                        resolve(undefined);
                        return;
                    }

                    this.records = [];
                    do {
                        const record = stack.shift();

                        if (['object', 'array'].includes(record.type) && record.value !== null) {
                            record.children.push(...Object.keys(record.value).map(name => new Record({
                                value: record.value[name],
                                name: name,
                                ancestors: record.ancestors.concat(record),
                            })));
                            stack.unshift(...record.children);
                        }

                        this.records.push(record);
                    } while (stack.length > 0);

                    resolve(this.records);
                });
            }
        }

        class AbstractTableView {
            constructor($element, parameters = {}) {
                this.$element = $element;
                this.$table = $element
                    .DataTable({
                        columnDefs: [
                            {
                                targets: 0, width: '40%', render: function (data) {
                                    // there are no space characters in the json keys, so the browser will not wrap them.
                                    // the following code forces word wrapping for json keys.
                                    return `<p class="m-0" style="word-wrap: break-word;">${data}</p>`
                                }
                            },
                            { targets: 1, width: '5em' },
                            { targets: 2, className: 'text-truncate' },
                        ],
                    });
            }
        }
        class View {
            constructor(model) {
                this.textPane = class {
                    expandTextPane() {
                        const pane = $('[data-id="textPane"]');
                        pane.css({ width: '50%' });

                    }
                    collapseTextPane() {
                        const pane = $('[data-id="textPane"]');
                        pane.css({ width: 'auto' });
                    }
                    get textPaneExpanded() {
                    }
                }
                this.records = new RecordsView($('[data-id="record"]'));
                this.schema = new SchemaView($('[data-id="schema"]'));
            }

            get $text() {
                return $('[data-id="text"]');
            }
            get text() {
                return $('[data-id="text"]')[0].value;
            }



        }

        class Controller {
            constructor(model, view) {
                view.$text
                    .on('input', async function () {
                        const records = await model.parseJson(view.text);

                        $('[data-id="records"]').DataTable()
                            .clear()
                            .rows.add(records
                                .map(record => [
                                    record.path,
                                    record.type,
                                    JSON.stringify(record.value).replace(/^"|"$/g, '')
                                ]))
                            .draw();
                    });
            }
        }

        $(function () {
            const model = new Model();
            const view = new View(model);
            view.text.$element
                .keyup(async function () {
                    console.log('start');
                    if (!view.text.changed) return;
                    console.log('parsing...')
                    const records = await model.parseJson(view.text.value);
                    console.log(records);
                    if (records === undefined) return;
                    console.log('end');

                    $('[data-id="records"]').DataTable()
                        .clear()
                        .rows.add(records
                            .map(record => [
                                record.path,
                                record.type,
                                JSON.stringify(record.value).replace(/^"|"$/g, '')
                            ]))
                        .draw();
                    $('[data-id="schema"]').DataTable()
                        .clear()
                        .rows.add(Object
                            .values(Object.groupBy(records, record => record.schemaId))
                            .map(groupedRecords => [
                                groupedRecords[0].schemaId,
                                groupedRecords[0].type,
                                groupedRecords
                                    .map(({ type, value }) => type === 'string' ? value : JSON.stringify(value))
                                    .filter(value => value !== '')
                                    .unique()
                                    .sort()
                                    .join(', '),
                            ]))
                        .draw();
                });

            $('[data-id="records"]').DataTable({
                columnDefs: [
                    {
                        targets: 0, width: '40%', render: function (data) {
                            // there are no space characters in the json keys, so the browser will not wrap them.
                            // the following code forces word wrapping for json keys.
                            return `<p style="word-wrap: break-word;">${data}</p>`
                        }
                    },
                    { targets: 1, width: '5em' },
                    { targets: 2, className: 'text-truncate' },
                ],
            });

            $('[data-id="schema"]').DataTable({
                columnDefs: [
                    {
                        targets: 0, width: '40%', render: function (data) {
                            // there are no space characters in the json keys, so the browser will not wrap them.
                            // the following code forces word wrapping for json keys.
                            return `<p style="word-wrap: break-word;">${data}</p>`
                        }
                    },
                    { targets: 1, width: '5em' },
                    { targets: 2, className: 'text-truncate' },
                ],
            });
        });
    </script>
</head>

<body>
    <div class="container d-flex min-vh-100 gap-1 px-0 py-1">
        <!-- it seems that resizing is implemented by changing the width.
           - for the above reason, resizing does not work well if width is specified by w-NN class.
           -->
        <div class="position-relative d-flex flex-column overflow-hidden resize-horizontal border-end gap-1"
             style="width: 50%; min-width: calc(2rem + 10px);" data-id="textPane">
            <div style="display: none;">
                <div class="alert alert-danger alert-dismissible fade show d-flex align-items-center m-0 px-2 py-1 gap-1">
                    <div class="bi bi-exclamation-triangle-fill fs-5"></div>
                    <div class="flex-fill">The input text could not be parsed as JSON.</div>
                    <button type="button" class="btn-close position-static p-0" data-bs-dismiss="alert" aria-label="Close"></button>
                </div>
            </div>
            <textarea class="flex-fill" data-id="text" placeholder="Enter JSON" autofocus></textarea>
            <div class="d-flex justify-content-end">
                <button class="btn btn-primary">Analyze</button>
            </div>
            <div class="position-absolute d-flex align-items-start" style="top: 0px; right: 0px; padding: 5px;" data-collpse="no">
                <button type="button" class="btn bi bi-caret-left fs-0 btn-hover-primary aspect-ratio-1x1 p-0"
                        style="width: 4rem; line-height: 0px; display: none;"></button>
                <button type="button" class="btn bi bi-caret-right btn-hover-primary aspect-ratio-1x1 p-0" style="width: 2rem; line-height: 0px;"
                        data-collpse="inversion"></button>
            </div>
        </div>
        <div class="d-flex flex-column flex-fill" style="width: 50%;">
            <ul class="nav nav-tabs sticky-top bg-white">
                <li class="nav-item">
                    <a class="nav-link active cursor-pointer" aria-current="page">Schema</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link cursor-pointer">Records</a>
                </li>
            </ul>
            <div class="flex-fill">
                <table class="display compact" style="table-layout: fixed;" data-id="schema">
                    <thead>
                        <tr>
                            <th>ID</th>
                            <th>Type</th>
                            <th>Samples</th>
                        </tr>
                    </thead>
                </table>
            </div>
            <div class="flex-fill" style="display: none;">
                <table class="display compact" style="table-layout: fixed;" data-id="records">
                    <thead>
                        <tr>
                            <th>Path</th>
                            <th>Type</th>
                            <th>Value</th>
                        </tr>
                    </thead>
                </table>
            </div>
        </div>
    </div>
</body>

</html>